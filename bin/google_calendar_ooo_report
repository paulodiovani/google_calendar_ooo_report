#!/usr/bin/env python

import calendar
import csv
import io
import json
import os.path
from datetime import datetime, timedelta
from functools import lru_cache

import click
import yaml
from cachetools import cached
from cachetools.keys import hashkey
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from pytz import timezone

CREDENTIALS_FILE = "store/credentials.json"
SETTINGS_FILE = "settings.yml"
TOKEN_FILE = "store/token.json"
# If modifying these scopes, delete the file token.json.
SCOPES = ["https://www.googleapis.com/auth/calendar.readonly"]


@cached(cache={}, key=lambda **_: hashkey(None))
def settings(**overrides):
    """
    Read settings from settings.yml and allow init with overrides.
    Further calls are cached and will ignore the overrides argument.
    """
    with open(SETTINGS_FILE) as file:
        config = yaml.safe_load(file).get("settings", {})

    for k, v in overrides.items():
        if v is not None:
            config[k] = v

    return config


def credentials():
    """
    Get Google Credentials from the credentials.json file
    and stores a token.json for next calls.
    """
    creds = None

    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists(TOKEN_FILE):
        creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        # Save the token for the next run
        with open(TOKEN_FILE, "w") as token:
            token.write(creds.to_json())

    return creds


def fetch_events(service, calendar_id, page_token=None):
    """
    Call Google Calendar API with calendar_id.
    Recursively calls itself if there is paginated results.
    """
    events_result = (
        service.events()
        .list(
            calendarId=calendar_id,
            timeMin=start_date().isoformat(),
            timeMax=end_date().isoformat(),
            singleEvents=True,
            orderBy="startTime",
            pageToken=page_token,
        )
        .execute()
    )

    # loop through response pages
    next_page = events_result.get("nextPageToken", None)
    if next_page:
        return events_result.get("items", []) + fetch_events(
            service, calendar_id, next_page
        )

    return events_result.get("items", [])


@lru_cache(maxsize=None)
def start_date():
    """
    Start date to look for events based on the period:
    day, week, month or year.
    """
    config = settings()

    tzinfo = tz_info()
    today = (
        tzinfo.localize(datetime.fromisoformat(config["date"]))
        if config.get("date", None)
        else datetime.now(tzinfo)
    )

    match config["period"]:
        case "DAY":
            return today.replace(hour=0, minute=0, second=0, microsecond=0)
        case "WEEK":
            # week starting on Sunday
            start_of_week = today - timedelta(days=(today.weekday() + 1) % 7)
            return start_of_week.replace(hour=0, minute=0, second=0, microsecond=0)
        case "MONTH":
            return today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        case "YEAR":
            return today.replace(
                month=1, day=1, hour=0, minute=0, second=0, microsecond=0
            )
        case _:
            raise ValueError("Invalid period specified in settings")


@lru_cache(maxsize=None)
def end_date():
    """
    End date to look for events based on the period:
    day, week, month or year.
    """
    config = settings()

    match config["period"]:
        case "DAY":
            return start_date().replace(hour=23, minute=59, second=59)
        case "WEEK":
            end_of_week = start_date() + timedelta(days=6)
            return end_of_week.replace(hour=23, minute=59, second=59)
        case "MONTH":
            [_, last_day_of_month] = calendar.monthrange(
                start_date().year, start_date().month
            )
            return start_date().replace(
                day=last_day_of_month, hour=23, minute=59, second=59
            )
        case "YEAR":
            return start_date().replace(month=12, day=31, hour=23, minute=59, second=59)
        case _:
            raise ValueError("Invalid period specified in settings")


@lru_cache(maxsize=None)
def tz_info():
    """
    Retrieves the timezone configuration from settings.

    Returns:
        pytz.timezone: A timezone object based on the configured timezone.
    """
    config = settings()
    return timezone(config["timezone"])


def count_weekends(start: datetime, end: datetime):
    """
    Count weekends in period
    """
    weekend_days = sum(
        1
        for d in range((end - start).days)
        if (start + timedelta(days=d)).weekday() >= 5
    )
    return timedelta(days=weekend_days)


def format_events(calendars: dict[str, list[dict]], weekend: bool = False):
    """
    Format the events in user calendars for printing.
    """
    ooo_events = {}
    tzinfo = tz_info()

    for calendar_id, events in calendars.items():
        ooo_events[calendar_id] = []

        for event in events:
            start = (
                datetime.fromisoformat(event["start"]["dateTime"]).astimezone(tzinfo)
                if "dateTime" in event["start"]
                else datetime.fromisoformat(event["start"]["date"]).replace(
                    tzinfo=tzinfo
                )
            )
            if start < start_date():
                start = start_date()

            end = (
                datetime.fromisoformat(event["end"]["dateTime"]).astimezone(tzinfo)
                if "dateTime" in event["end"]
                else datetime.fromisoformat(event["end"]["date"]).replace(tzinfo=tzinfo)
            )
            if end > end_date():
                end = end_date() + timedelta(seconds=1)

            duration = end - start
            if not weekend:
                duration -= count_weekends(start, end)

            last = end
            if duration.days > 0:
                last = end - timedelta(days=1)  # last day of multiple days events

            ooo_events[calendar_id].append(
                {
                    "start_date": start,
                    "end_date": last,  # printable end date
                    "duration": duration,
                    "summary": event.get("summary", "No summary"),
                }
            )

    return ooo_events


def format_as_text(calendars: dict[str, list[dict]]):
    """
    Return text version of the report for printing
    """
    lines = []

    for calendar_id, events in calendars.items():
        lines.append(get_calendar_name(calendar_id))
        lines.extend(
            f"  {event['start_date'].date()} - {event['end_date'].date()} - {event['summary']} ({event['duration']})"
            for event in events
        )

    return "\n".join(lines)


def split_duration(event: dict):
    """
    Splits the duration into days and hours fields
    """
    duration: timedelta = event["duration"]
    dindex = list(event.keys()).index("duration")
    items = list(event.items())

    return dict(
        [
            *(items[0:dindex]),
            ("duration_days", duration.days),
            ("duration_hours", duration.seconds / 3600),
            items[dindex + 1],
        ]
    )


def format_as_csv(calendars: dict[str, list[dict]]):
    """
    Return csv version of the report for printing
    """
    output = io.StringIO()
    writer = csv.writer(output, delimiter=";", quoting=csv.QUOTE_MINIMAL)
    writer.writerow(
        [
            "calendar_id",
            "start_date",
            "end_date",
            "duration_days",
            "duration_hours",
            "summary",
        ]
    )

    rows = (
        [get_calendar_name(calendar_id), *split_duration(event).values()]
        for calendar_id, events in calendars.items()
        for event in events
    )
    writer.writerows(rows)

    csv_string = output.getvalue()
    output.close
    return csv_string


def print_report(calendars: dict[str, list[dict]], format: str = "text"):
    """
    Print the report.
    Currently on text format is supported.
    """
    match format:
        case "csv":
            print(format_as_csv(calendars))
        case "json":
            print(json.dumps(calendars, indent=2, sort_keys=True, default=str))
        case "text" | _:
            print(format_as_text(calendars))


def get_calendar_id(calendar_id: str | dict[str, str]):
    return calendar_id if isinstance(calendar_id, str) else list(calendar_id.keys())[0]


def get_calendar_name(calendar_id: str) -> str:
    config = settings()

    for id in config["calendar_id"]:
        if isinstance(id, str):
            if id == calendar_id:
                return id
        else:
            id, name = list(id.items())[0]
            if id == calendar_id:
                return name

    return calendar_id


@click.command()
@click.option("-d", "--date", help="Date to report (default to today).")
@click.option(
    "-p",
    "--period",
    help="Period to report: DAY, WEEK, MONTH, YEAR. Start at beginning of.",
)
@click.option(
    "-f",
    "--format",
    type=click.Choice(["csv", "json", "text"]),
    default="text",
    help="Output format (default to text).",
)
@click.option(
    "-w",
    "--weekend/--no-weekend",
    default=False,
    help="Include weekends in report (default to False)",
)
def main(date=None, period=None, format="text", weekend=False):
    """
    Fetch user calendars and print a report of OOO (Out of Office) events.
    Configuration is defined in settings.yml file.

    Some options can be overridden with arguments.
    """
    ooo_events = {}
    service = build("calendar", "v3", credentials=credentials())

    # initialize config with overrides, if any
    config = settings(**{"date": date, "period": period})

    for calendar_id in config["calendar_id"]:
        calendar_id = get_calendar_id(calendar_id)
        events = fetch_events(service, calendar_id)

        if not events:
            # no upcoming events for calendar
            continue

        ooo_events[calendar_id] = [
            event
            for event in events
            if (
                event.get("eventType", "") == "outOfOffice"
                or any(
                    keyword.lower() in event.get("summary", "").lower()
                    for keyword in config["keywords"]
                )
            )
            and not any(
                keyword.lower() in event.get("summary", "").lower()
                for keyword in config["exclude_keywords"]
            )
        ]

    print_report(format_events(ooo_events, weekend), format)


if __name__ == "__main__":
    main()
